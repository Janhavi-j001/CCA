6. Kruskal algo MST

#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100
#define MAX_EDGES 100

// Structure to represent an edge in the graph
struct Edge {
    int source, destination, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent, rank;
};

// Function to compare two edges based on their weights (used for sorting)
int compareEdges(const void *a, const void *b) {
    return ((struct Edge *)a)->weight - ((struct Edge *)b)->weight;
}

// Function to find the subset of an element (uses path compression)
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Function to perform union of two subsets (uses union by rank)
void unionSets(struct Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);

    if (subsets[rootX].rank < subsets[rootY].rank)
        subsets[rootX].parent = rootY;
    else if (subsets[rootX].rank > subsets[rootY].rank)
        subsets[rootY].parent = rootX;
    else {
        subsets[rootX].parent = rootY;
        subsets[rootY].rank++;
    }
}

// Function to find the minimum cost spanning tree using Kruskal's algorithm
void kruskal(struct Edge edges[], int V, int E) {
    struct Edge result[V]; // To store the result (the minimum spanning tree)
    struct Subset subsets[V]; // To store the subsets for union-find
    int resultIndex = 0; // Index for the result[] array

    // Step 1: Sort all the edges in non-decreasing order of their weights
    qsort(edges, E, sizeof(edges[0]), compareEdges);

    // Step 2: Initialize subsets for each vertex
    for (int v = 0; v < V; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Step 3: Iterate through all the edges and add the minimum weight edges that don't form a cycle
    for (int e = 0; e < E; e++) {
        int rootX = find(subsets, edges[e].source);
        int rootY = find(subsets, edges[e].destination);

        if (rootX != rootY) {
            // This edge doesn't form a cycle, add it to the result
            result[resultIndex++] = edges[e];
            unionSets(subsets, rootX, rootY);
        }
    }

    // Print the result (minimum spanning tree)
    printf("Edges in the Minimum Spanning Tree:\n");
    for (int i = 0; i < resultIndex; i++) {
        printf("(%d - %d) Weight: %d\n", result[i].source, result[i].destination, result[i].weight);
    }
}

// Driver program to test the functions
int main() {
    int V, E;

    // Input: Number of vertices and edges
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    printf("Enter the number of edges: ");
    scanf("%d", &E);

    // Input the edges (source, destination, weight)
    struct Edge edges[MAX_EDGES];
    printf("Enter the edges (source destination weight):\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d %d", &edges[i].source, &edges[i].destination, &edges[i].weight);
    }

    // Perform Kruskal's algorithm
    kruskal(edges, V, E);

    return 0;
}

input : 

Enter the number of vertices: 4
Enter the number of edges: 5
Enter the edges (source destination weight):
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4

output:

Edges in the Minimum Spanning Tree:
(2 - 3) Weight: 4
(0 - 3) Weight: 5
(0 - 1) Weight: 10
............................................................................................

7. prims algo MST

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 100

// Structure to represent a graph
struct Graph {
    int V; // Number of vertices
    int **matrix; // Adjacency matrix to store edge weights
};

// Function to initialize a graph
struct Graph* initializeGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    
    // Allocate memory for the adjacency matrix
    graph->matrix = (int**)malloc(V * sizeof(int*));
    for (int i = 0; i < V; i++) {
        graph->matrix[i] = (int*)malloc(V * sizeof(int));
    }

    // Initialize the matrix with INT_MAX (representing infinity)
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            graph->matrix[i][j] = INT_MAX;
        }
    }

    return graph;
}

// Function to add an edge to the graph
void addEdge(struct Graph* graph, int source, int destination, int weight) {
    graph->matrix[source][destination] = weight;
    graph->matrix[destination][source] = weight;
}

// Function to find the vertex with the minimum key value
int minKey(int key[], int mstSet[], int V) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (mstSet[v] == 0 && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }

    return min_index;
}

// Function to print the minimum cost spanning tree
void printMST(int parent[], struct Graph* graph) {
    printf("Edges in the Minimum Spanning Tree:\n");
    for (int i = 1; i < graph->V; i++) {
        printf("(%d - %d) Weight: %d\n", parent[i], i, graph->matrix[i][parent[i]]);
    }
}

// Function to perform Prim's algorithm
void prim(struct Graph* graph) {
    int V = graph->V;
    int parent[V]; // To store the parent of each vertex in the MST
    int key[V]; // Key values used to pick minimum weight edge

    int mstSet[V]; // Set to keep track of vertices included in the MST
    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = 0;
    }

    // Start with the first vertex
    key[0] = 0;
    parent[0] = -1; // No parent for the first vertex

    // Construct the MST
    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet, V);

        mstSet[u] = 1;

        // Update key values and parent for adjacent vertices of the picked vertex
        for (int v = 0; v < V; v++) {
            if (graph->matrix[u][v] && mstSet[v] == 0 && graph->matrix[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph->matrix[u][v];
            }
        }
    }

    // Print the MST
    printMST(parent, graph);
}

// Driver program to test the functions
int main() {
    int V, E;

    // Input: Number of vertices and edges
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    // Initialize the graph
    struct Graph* graph = initializeGraph(V);

    // Input: Number of edges
    printf("Enter the number of edges: ");
    scanf("%d", &E);

    // Input the edges and their weights
    printf("Enter the edges (source destination weight):\n");
    for (int i = 0; i < E; i++) {
        int source, destination, weight;
        scanf("%d %d %d", &source, &destination, &weight);
        addEdge(graph, source, destination, weight);
    }

    // Perform Prim's algorithm
    prim(graph);

    // Free allocated memory
    for (int i = 0; i < V; i++) {
        free(graph->matrix[i]);
    }
    free(graph->matrix);
    free(graph);

    return 0;
}

input : 

Enter the number of vertices: 5
Enter the number of edges: 7
Enter the edges (source destination weight):
0 1 2
0 2 4
1 2 1
1 3 7
2 3 3
2 4 5
3 4 6

output:

Edges in the Minimum Spanning Tree:
(0 - 1) Weight: 2
(2 - 0) Weight: 4
(1 - 2) Weight: 1
(3 - 2) Weight: 3
.............................................................................

8. n queens problem

#include <stdio.h>
#include <stdbool.h>

#define N 8 // Define the size of the chessboard

// Function to print the chessboard
void printBoard(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%c ", board[i][j] ? 'Q' : '.');
        }
        printf("\n");
    }
    printf("\n");
}

// Function to check if a queen can be placed at board[row][col]
bool isSafe(int board[N][N], int row, int col) {
    // Check the column on the left
    for (int i = 0; i < row; i++) {
        if (board[i][col])
            return false;
    }

    // Check upper diagonal on the left
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j])
            return false;
    }

    // Check lower diagonal on the left
    for (int i = row, j = col; i >= 0 && j < N; i--, j++) {
        if (board[i][j])
            return false;
    }

    return true;
}

// Recursive function to solve the N-Queens problem
bool solveNQueensUtil(int board[N][N], int row) {
    if (row == N) {
        // All queens are placed successfully
        printBoard(board);
        return true; // Return true to find all solutions
    }

    bool res = false;
    for (int col = 0; col < N; col++) {
        if (isSafe(board, row, col)) {
            board[row][col] = 1; // Place the queen

            // Recur to place rest of the queens
            res = solveNQueensUtil(board, row + 1) || res;

            board[row][col] = 0; // Backtrack if placing a queen doesn't lead to a solution
        }
    }

    return res;
}

// Main function to solve the N-Queens problem
void solveNQueens() {
    int board[N][N] = {{0}};

    if (!solveNQueensUtil(board, 0)) {
        printf("Solution does not exist for %d queens.\n", N);
    }
}

// Driver program
int main() {
    solveNQueens();
    return 0;
}

output:
Q . . . . . . .
. . . . Q . . .
. . . . . . . Q
. . . . . Q . .
. . Q . . . . .
. . . . . . Q .
. Q . . . . . .
. . . Q . . . .
...................................................................................

9. TSP branch and bound

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_CITIES 10

// Structure to represent the state of the traveling salesman problem
struct State {
    int city;
    int level;
    int path[MAX_CITIES];
    int bound;
};

// Function to calculate the cost of a given path
int calculateCost(int graph[MAX_CITIES][MAX_CITIES], struct State* state) {
    int cost = 0;
    for (int i = 0; i < state->level; i++) {
        cost += graph[state->path[i]][state->path[i + 1]];
    }
    cost += graph[state->path[state->level]][state->path[0]]; // Return to the starting city
    return cost;
}

// Function to find the minimum cost bound for a given state
int calculateBound(int graph[MAX_CITIES][MAX_CITIES], struct State* state) {
    int bound = 0;

    // Calculate the bound based on the cost of the current path and the minimum edge costs
    for (int i = 0; i < state->level; i++) {
        bound += graph[state->path[i]][state->path[i + 1]];
    }

    // Handle the edge case for the last level
    if (state->level < MAX_CITIES - 1) {
        int minEdge = INT_MAX;
        for (int i = 0; i < MAX_CITIES; i++) {
            if (minEdge > graph[state->city][i] && i != state->city) {
                minEdge = graph[state->city][i];
            }
        }
        bound += minEdge;
    }

    return bound;
}

// Function to perform Branch and Bound for the Traveling Salesman Problem
void branchAndBound(int graph[MAX_CITIES][MAX_CITIES]) {
    struct State* state = (struct State*)malloc(sizeof(struct State));

    // Initialize the state for the starting city
    state->city = 0;
    state->level = 0;
    state->path[0] = 0;
    state->bound = calculateBound(graph, state);

    // Create a stack for storing states
    struct State* stack[MAX_CITIES * MAX_CITIES];
    int stackTop = -1;

    int minCost = INT_MAX;

    while (1) {
        while (state->level < MAX_CITIES - 1) {
            if (state->bound < minCost) {
                for (int i = 1; i < MAX_CITIES; i++) {
                    if (state->path[state->level] != i) {
                        struct State* newState = (struct State*)malloc(sizeof(struct State));
                        *newState = *state;
                        newState->city = i;
                        newState->level++;
                        newState->path[newState->level] = i;
                        newState->bound = calculateBound(graph, newState);

                        stack[++stackTop] = newState;
                    }
                }
            }

            state->level++;
        }

        // Handle the case when all cities are visited
        if (state->level == MAX_CITIES - 1) {
            for (int i = 1; i < MAX_CITIES; i++) {
                if (graph[state->city][i] && i != state->path[state->level]) {
                    struct State* newState = (struct State*)malloc(sizeof(struct State));
                    *newState = *state;
                    newState->level++;
                    newState->path[newState->level] = i;
                    newState->bound = calculateBound(graph, newState);

                    stack[++stackTop] = newState;
                }
            }
        }

        // Pop a state from the stack
        if (stackTop == -1) {
            break;
        }

        state = stack[stackTop--];

        // Check if the current state is a complete tour
        if (state->level == MAX_CITIES - 1) {
            int currentCost = calculateCost(graph, state);

            if (currentCost < minCost) {
                minCost = currentCost;

                // Print the current path
                printf("Optimal Path: ");
                for (int i = 0; i < MAX_CITIES; i++) {
                    printf("%d ", state->path[i]);
                }
                printf("0\n");

                printf("Optimal Cost: %d\n", minCost);
            }
        }
    }

    free(state);
}

// Driver program to test the function
int main() {
    int graph[MAX_CITIES][MAX_CITIES];

    // Input: Cost matrix for traveling between cities
    printf("Enter the cost matrix for traveling between cities:\n");
    for (int i = 0; i < MAX_CITIES; i++) {
        for (int j = 0; j < MAX_CITIES; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Perform Branch and Bound for the Traveling Salesman Problem
    branchAndBound(graph);

    return 0;
}

input : 

Enter the cost matrix for traveling between cities:
0 10 15 20
5 0 9 10
6 13 0 12
8 8 9 0

output: 

Optimal Path: 0 1 3 2 0
Optimal Cost: 35
